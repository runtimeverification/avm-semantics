#pragma version 6
txn NumAppArgs
int 0
==
bnz main_l10
txna ApplicationArgs 0
method "add(uint64,uint64)uint64"
==
bnz main_l9
txna ApplicationArgs 0
method "sub(uint64,uint64)uint64"
==
bnz main_l8
txna ApplicationArgs 0
method "mul(uint64,uint64)uint64"
==
bnz main_l7
txna ApplicationArgs 0
method "div(uint64,uint64)uint64"
==
bnz main_l6
err
main_l6:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 9
txna ApplicationArgs 2
btoi
store 10
load 9
load 10
callsub div_3
store 11
byte 0x151f7c75
load 11
itob
concat
log
int 1
return
main_l7:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 6
txna ApplicationArgs 2
btoi
store 7
load 6
load 7
callsub mul_2
store 8
byte 0x151f7c75
load 8
itob
concat
log
int 1
return
main_l8:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 3
txna ApplicationArgs 2
btoi
store 4
load 3
load 4
callsub sub_1
store 5
byte 0x151f7c75
load 5
itob
concat
log
int 1
return
main_l9:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 0
txna ApplicationArgs 2
btoi
store 1
load 0
load 1
callsub add_0
store 2
byte 0x151f7c75
load 2
itob
concat
log
int 1
return
main_l10:
txn OnCompletion
int NoOp
==
bnz main_l12
err
main_l12:
txn ApplicationID
int 0
==
assert
int 1
return

// add
add_0:
+
retsub

// sub
sub_1:
-
retsub

// mul
mul_2:
*
retsub

// div
div_3:
/
retsub